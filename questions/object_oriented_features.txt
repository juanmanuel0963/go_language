Go Object-Oriented Language Features
------------------------------------
- Structs - Structs are user-defined types. Struct types (with methods) serve similar purposes to classes in other languages.
- Methods - Methods are functions that operate on particular types. They have a receiver clause that mandates what type they operate on.
- Embedding - we can embed anonymous types inside each other. If we embed a nameless struct then the embedded struct provides its state (and methods) to the embedding struct directly.
- Interfaces - Interfaces are types that declare sets of methods. 
  - Similarly to interfaces in other languages, they have no implementation. 
  - Objects that implement all the interface methods automatically implement the interface. 
  - There is no inheritance or subclassing or "implements" keyword.

The Go way to implement:
------------------------
- Encapsulation - Go encapsulates things at the package level. 
  - Names that start with a lowercase letter are only visible within that package. 
  - You can hide anything in a private package and just expose specific types, interfaces, and factory functions.
- Inheritance - Composition by embedding an anonymous type is equivalent to implementation inheritance.
- Polymorphism - A variable of type interface can hold any value which implements the interface.

How do we perform inheritance with Golang?
------------------------------------------------
- This is a bit of a trick question: there is no inheritance in Golang because it does not support classes.
- However, you can mimic inheritance behavior using composition to use an existing struct object to define a starting behavior of a new object. 
- Once the new object is created, functionality can be extended beyond the original struct.

type Animal struct {
    // …
}

func (a *Animal) Eat()   { … }
func (a *Animal) Sleep() { … }
func (a *Animal) Run() { … }

type Dog struct {
    Animal
    // …
}

- The Animal struct contains Eat(), Sleep(), and Run() functions. 
- These functions are embedded into the child struct Dog by simply listing the struct at the top of the implementation of Dog.

Explain the Object-Oriented Architecture of Golang.
---------------------------------------------------
- Unlike traditional Object-Oriented Programming, Golang does not have a class-object architecture.
- Rather structs and methods hold complex data structures and behavior.
- A struct is nothing more than a schema containing a blueprint of data that a structure will hold.
- Structs are useful to represent concepts from the real world like cars, people, or books.
