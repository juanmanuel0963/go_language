What is Golang?
---------------
- Golang, which some professionals refer to as just "Go," is a computer programming language invented by programmers at Google in 2009. 
- It is an open-source language, which means that its code is freely accessible to the general public for modification and sharing. 
- Many individuals, organisations and companies use Golang as their primary coding language due to its open-source nature.

Is Go a new language, framework or library?
-------------------------------------------
- Go isn't a library and not a framework, it's a new language.
- Go is mostly in the C family (basic syntax), with significant input from the Pascal/Modula/Oberon family (declarations, packages).
- Go does have an extensive library, called the runtime, that is part of every Go program.
- Although it is more central to the language, Go's runtime is analogous to libc, the C library.
- It is important to understand, however, that Go's runtime does not include a virtual machine, such as is provided by the Java runtime.
- Go programs are compiled ahead of time to native machine code.

Why should one learn Golang? What are the advantages of Golang over other languages?
------------------------------------------------------------------------------------

- Go language follows the principle of maximum effect with minimum efforts. 
- Every feature and syntax of Go was developed to ease the life of programmers.
- Following are the advantages of Go Language:
  - Simple and Understandable: 
    - Go is very simple to learn and understand.
    - There are no unnecessary features included. 
    - Every single line of the Go code is very easily readable and thereby easily understandable irrespective of the size of the codebase.
    - Go was developed by keeping simplicity, maintainability and readability in mind.
  - Standard Powerful Library:
    - Go supports all standard libraries and packages that help in writing code easily and efficiently.
  - Support for concurrency:
    - Go provides very good support for concurrency using Go Routines or channels. 
    - They take advantage of efficient memory management strategies and multi-core processor architecture for implementing concurrency.
  - Static Type Checking:
    - Go is a very strong and statically typed programming language.
    - Statically typed means every variable has types assigned to it. 
    - The data type cannot be changed once created and strongly typed means that there are rules and restrictions while performing type conversion.
    - This ensures that the code is type-safe and all type conversions are handled efficiently. 
    - This is done for reducing the chances of errors at runtime.
  - Easy to install Binaries: 
    - Go provides support for generating binaries for the applications with all required dependencies.
    - These binaries help to install tools or applications written in Go very easily without the need for a Go compiler or package managers or runtimes.
  - Good Testing Support:
    - Go has good support for writing unit test cases along with our code.
    - There are libraries that support checking code coverage and generating code documentation.

What are some advantages of using Go?
-------------------------------------
- Go is an attempt to introduce a new, concurrent, garbage-collected language with fast compilation and the following benefits:
- It is possible to compile a large Go program in a few seconds on a single computer.
- Go provides a model for software construction that makes dependency analysis easy and avoids much of the overhead of C-style include files and libraries.
- Go's type system has no hierarchy, so no time is spent defining the relationships between types. 
- Also, although Go has static types, the language attempts to make types feel lighter weight than in typical OO languages.
- Go is fully garbage-collected and provides fundamental support for concurrent execution and communication.
- By its design, Go proposes an approach for the construction of system software on multicore machines.

What are the benefits of using Go programming?
----------------------------------------------
Following are the benefits of using Go programming:
- Support for environment adopting patterns similar to dynamic languages. 
- For example type inference (x := 0 is valid declaration of a variable x of type int).
- Compilation time is fast.
- In built concurrency support: light-weight processes (via goroutines), channels, select statement.
- Conciseness, Simplicity, and Safety.
- Support for Interfaces and Type embedding.
- The go compiler supports static linking. All the go code can be statically linked into one big fat binary and it can be deployed in cloud servers easily without worrying about dependencies.

Is Golang a case-sensitive programming language?
------------------------------------------------
- Yes, Golang is a case-sensitive programming language.
- It is essential to write identifiers like function names, variables and language keywords with consistent capitalisation to produce the desired outputs.
- When you use Golang, capitalisation also determines which packages to export.

How does Golang work so fast?
-----------------------------
- Golang is an incredibly fast performing language due to its design.
- Unlike some other programming languages, it has a small syntax and concurrency model, which helps make it more efficient.
- Golang's compilation system operates quickly and it has the ability to machine code, both of which expedite its pace
- One of the most impactful speed-enhancing features of Golang is its storage arrangement.
- It hyperlinks all the dependency libraries into a single binary file.
- This reduces the language's reliance on servers, and it minimises the data lag you get from this reliance in some other languages.

Why the Go language was created?
--------------------------------
- Go was born out of frustration with existing languages and environments for systems programming.
- Go is an attempt to have:
  - an interpreted, dynamically typed language with
  - the efficiency and safety of a statically typed, compiled language
  - support for networked and multicore computing
  - be fast in compilation

Is Go an object-oriented language?
----------------------------------
- Yes and no. 
- Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. 
- This is in contrast to most object-oriented languages like C++, Java, C#, Scala, and even dynamic languages like Python and Ruby.

What is a Syntax in Golang programming language?
------------------------------------------------
- In Go programming language, a syntax is specified using the Extended Backus-Naur Form (EBNF).
